CREATE DATABASE [CORESYS];
GO

USE [CORESYS];
GO

CREATE SCHEMA [CORE];
GO

CREATE TABLE [CORE].[USERS] (
    [USER_ID]           CHAR(16),
    [PASSWORD]          CHAR(32)        NOT NULL,
    [CREATE_TIME]       DATETIMEOFFSET,
    CONSTRAINT PK_USERS PRIMARY KEY     (USER_ID)
);

CREATE TABLE [CORE].[ACCOUNT_STATUS] (
    [STATUS_ID]         TINYINT,
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_ACCOUNT_STATUS PRIMARY KEY (STATUS_ID)
);

CREATE TABLE [CORE].[ACCOUNTS] (
    [ACCOUNT_ID]        CHAR(16),
    [USER_ID]           CHAR(16),
    [PRE_BALANCE]       MONEY       NOT NULL,
    [BALANCE]           MONEY       NOT NULL,
    [DEPOSIT]           MONEY       NOT NULL,
    [WITHDARW]          MONEY       NOT NULL,
    [STATUS_ID]         TINYINT,
    [SETTLEMENT_TIME]   DATETIMEOFFSET,
    CONSTRAINT PK_ACCOUNTS          PRIMARY KEY (ACCOUNT_ID),
    CONSTRAINT FK_ACCOUNTS_USER     FOREIGN KEY (USER_ID)       REFERENCES [CORE].[USERS]           (USER_ID),
    CONSTRAINT FK_ACCOUNTS_STATUS   FOREIGN KEY (STATUS_ID)     REFERENCES [CORE].[ACCOUNT_STATUS]  ([STATUS_ID])
);

CREATE TABLE [CORE].[RATE_TYPE](
    [TYPE_ID]           TINYINT,
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_RATE_TYPE PRIMARY KEY (TYPE_ID)
);

CREATE TABLE [CORE].[INSRTUMENT_STATUS](
    [STATUS_ID]         TINYINT,
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_INSTRUMENT_STATUS PRIMARY KEY (STATUS_ID)
);

CREATE TABLE [CORE].[EXCHANGES] (
    [EXCHANGE_ID]       CHAR(16),
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_EXCHANGES PRIMARY KEY (EXCHANGE_ID)
);

CREATE TABLE [CORE].[PRODUCTS] (
    [PRODUCT_ID]        CHAR(16),
    [EXCHANGE_ID]       CHAR(16),
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_PRODUCTS  PRIMARY KEY (PRODUCT_ID),
    CONSTRAINT FK_EXCHANGES FOREIGN KEY (EXCHANGE_ID) REFERENCES [CORE].[EXCHANGES] (EXCHANGE_ID)
);

CREATE TABLE [CORE].[INSTRUMENTS](
    [INSTRUMENT_ID]     CHAR(16),
    [SYMBOL]            NCHAR(16)       NOT NULL,
    [PRODUCT_ID]        CHAR(16)        NOT NULL,
    [STATUS_ID]         TINYINT,
    [MULTIPLE]          SMALLINT        NOT NULL,
    [MARGIN_RATE]       REAL            NOT NULL,
    [MARGIN_TYPE_ID]    TINYINT,
    [OPEN_FEE_RATE]     REAL            NOT NULL,
    [CLOSE_FEE_RATE]    REAL            NOT NULL,
    [FEE_TYPE_ID]       TINYINT,
    CONSTRAINT PK_INSTRUMENTS           PRIMARY KEY (INSTRUMENT_ID),
    CONSTRAINT FK_INSTRUMENTS_PRODUCT   FOREIGN KEY (PRODUCT_ID)        REFERENCES [CORE].[PRODUCTS]            (PRODUCT_ID),
    CONSTRAINT FK_INSTRUMENTS_STATUS    FOREIGN KEY (STATUS_ID)         REFERENCES [CORE].[INSRTUMENT_STATUS]   (STATUS_ID),
    CONSTRAINT FK_INSTRUMENTS_MARGIN    FOREIGN KEY (MARGIN_TYPE_ID)    REFERENCES [CORE].[RATE_TYPE]           (TYPE_ID),
    CONSTRAINT FK_INSTRUMENTS_FEE       FOREIGN KEY (FEE_TYPE_ID)       REFERENCES [CORE].[RATE_TYPE]           (TYPE_ID)
);

CREATE TABLE [CORE].[POSITION_DIRECTION] (
    [POSI_DIRECTION_ID] TINYINT,
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_POSI_DIRECTION PRIMARY KEY (POSI_DIRECTION_ID)
);

CREATE TABLE [CORE].[CONTRACTS] (
    [CONTRACT_ID]       CHAR(16),
    [ACCOUNT_ID]        CHAR(16),
    [USER_ID]           CHAR(16),
    [INSTRUMENT_ID]     CHAR(16),
    [AMOUNT]            MONEY               NOT NULL,
    [CLOSE_AMOUNT]      MONEY,
    [VOLUME]            SMALLINT            NOT NULL,
    [POSI_DIRECTION_ID] TINYINT             NOT NULL,
    [CREATE_TIME]       DATETIMEOFFSET      NOT NULL,
    [UDPATE_TIME]       DATETIMEOFFSET      NOT NULL,
    [CLOSE_TIME]        DATETIMEOFFSET,
    CONSTRAINT PK_CONTRACTS                 PRIMARY KEY (CONTRACT_ID),
    CONSTRAINT FK_CONTRACTS_USERS           FOREIGN KEY (USER_ID)           REFERENCES [CORE].[USERS]               (USER_ID),
    CONSTRAINT FK_CONTRACTS_ACCOUNTS        FOREIGN KEY (ACCOUNT_ID)        REFERENCES [CORE].[ACCOUNTS]            (ACCOUNT_ID),
    CONSTRAINT FK_CONTRACTS_POSI_DIRECTION  FOREIGN KEY (POSI_DIRECTION_ID) REFERENCES [CORE].[POSITION_DIRECTION]  (POSI_DIRECTION_ID),
    CONSTRAINT FK_CONTRACTS_INSTRUMENT      FOREIGN KEY (INSTRUMENT_ID)     REFERENCES [CORE].[INSTRUMENTS]         (INSTRUMENT_ID)
);

CREATE TABLE [CORE].[ORDER_DIRECTION] (
    [DIRECTION_ID]      TINYINT,
    [NOTE]              NCHAR(128)
    CONSTRAINT PK_ORDER_DIRECTION PRIMARY KEY (DIRECTION_ID),
);

CREATE TABLE [CORE].[ORDER_OFFSET] (
    [OFFSET_ID]         TINYINT,
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_ORDER_OFFSET PRIMARY KEY (OFFSET_ID)
);

CREATE TABLE [CORE].[ORDER_FILL_STRATEGY] (
    [STRATEGY_ID]       TINYINT,
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_FILL_STRATEGY PRIMARY KEY (STRATEGY_ID)
);

CREATE TABLE [CORE].[ORDERS] (
    [ORDER_ID]          CHAR(16),
    [ACCOUNT_ID]        CHAR(16),
    [USER_ID]           CHAR(16),
    [INSTRUMENT_ID]     CHAR(16),
    [EXCHANGE_ID]       CHAR(16)        NOT NULL,
    [LIMIT_PRICE]       MONEY           NOT NULL,
    [VOLUME]            SMALLINT        NOT NULL,
    [DIRECTION_ID]      TINYINT,
    [OFFSET_ID]         TINYINT,
    [STRATEGY_ID]       TINYINT,
    [CREATE_TIME]       DATETIMEOFFSET  NOT NULL,
    CONSTRAINT PK_ORDERS                PRIMARY KEY (ORDER_ID),
    CONSTRAINT FK_ORDERS_ACCOUNT        FOREIGN KEY (ACCOUNT_ID)    REFERENCES [CORE].[ACCOUNTS]                (ACCOUNT_ID),
    CONSTRAINT FK_ORDERS_USER           FOREIGN KEY (USER_ID)       REFERENCES [CORE].[USERS]                   (USER_ID),
    CONSTRAINT FK_ORDERS_INSTRUMENT     FOREIGN KEY (INSTRUMENT_ID) REFERENCES [CORE].[INSTRUMENTS]             (INSTRUMENT_ID),
    CONSTRAINT FK_ORDERS_DIRECTION      FOREIGN KEY (DIRECTION_ID)  REFERENCES [CORE].[ORDER_DIRECTION]         (DIRECTION_ID),
    CONSTRAINT FK_ORDERS_OFFSET         FOREIGN KEY (OFFSET_ID)     REFERENCES [CORE].[ORDER_OFFSET]            (OFFSET_ID),
    CONSTRAINT FK_ORDERS_FILL_STRATEGY  FOREIGN KEY (STRATEGY_ID)   REFERENCES [CORE].[ORDER_FILL_STRATEGY]     (STRATEGY_ID)
);

CREATE TABLE [CORE].[ORDER_STATUS] (
    [STATUS_ID]         TINYINT,
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_ORDER_STATUS PRIMARY KEY (STATUS_ID)
);

CREATE TABLE [CORE].[ORDER_STATUSES] (
    [ORDER_STATUS_ID]   CHAR(16),
    [ORDER_ID]          CHAR(16),
    [ACCOUNT_ID]        CHAR(16),
    [USER_ID]           CHAR(16),
    [INSTRUMENT_ID]     CHAR(16),
    [LIMIT_PRICE]       MONEY               NOT NULL,
    [VOLUME]            SMALLINT            NOT NULL,
    [TRADED_VOLUME]     SMALLINT            NOT NULL,
    [TRADED_AMOUNT]     MONEY               NOT NULL,
    [DIRECTION_ID]      TINYINT,
    [OFFSET_ID]         TINYINT,
    [STATUS_ID]         TINYINT,
    [UPDATE_TIME]       DATETIMEOFFSET      NOT NULL,
    [TRADING_DAY]       DATETIMEOFFSET      NOT NULL,
    CONSTRAINT PK_ORDER_STATUSES            PRIMARY KEY (ORDER_STATUS_ID),
    CONSTRAINT FK_ORDER_STATUS              FOREIGN KEY (STATUS_ID)         REFERENCES [CORE].[ORDER_STATUS]    (STATUS_ID),
    CONSTRAINT FK_ORDER_STATUSES_ORDER      FOREIGN KEY (ORDER_ID)          REFERENCES [CORE].[ORDERS]          (ORDER_ID),
    CONSTRAINT FK_ORDER_STATUSES_ACCOUNT    FOREIGN KEY (ACCOUNT_ID)        REFERENCES [CORE].[ACCOUNTS]        (ACCOUNT_ID),
    CONSTRAINT FK_ORDER_STATUSES_USER       FOREIGN KEY (USER_ID)           REFERENCES [CORE].[USERS]           (USER_ID),
    CONSTRAINT FK_ORDER_STATUSES_INSTRUMENT FOREIGN KEY (INSTRUMENT_ID)     REFERENCES [CORE].[INSTRUMENTS]     (INSTRUMENT_ID),
    CONSTRAINT FK_ORDER_STATUSES_DIRECTION  FOREIGN KEY (DIRECTION_ID)      REFERENCES [CORE].[ORDER_DIRECTION] (DIRECTION_ID),
    CONSTRAINT FK_ORDER_STATUSES_OFFSET     FOREIGN KEY (OFFSET_ID)         REFERENCES [CORE].[ORDER_OFFSET]    (OFFSET_ID)
);

CREATE TABLE [CORE].[TRADES] (
    [TRADE_ID]          CHAR(16),
    [ORDER_ID]          CHAR(16),
    [ACCOUNT_ID]        CHAR(16),
    [USER_ID]           CHAR(16),
    [INSTRUMENT_ID]     CHAR(16),
    [TRADED_PRICE]      MONEY                   NOT NULL,
    [TRADED_VOLUME]     SMALLINT                NOT NULL,
    [DIRECTION_ID]      TINYINT,
    [OFFSET_ID]         TINYINT,
    [UPDATE_TIME]       DATETIMEOFFSET          NOT NULL,
    [TRADING_DAY]       DATETIMEOFFSET          NOT NULL,
    CONSTRAINT PK_TRADES            PRIMARY KEY (TRADE_ID),
    CONSTRAINT FK_TRADES_ORDER      FOREIGN KEY (ORDER_ID)      REFERENCES [CORE].[ORDERS]          (ORDER_ID),
    CONSTRAINT FK_TRADES_ACCOUNT    FOREIGN KEY (ACCOUNT_ID)    REFERENCES [CORE].[ACCOUNTS]        (ACCOUNT_ID),
    CONSTRAINT FK_TRADES_USER       FOREIGN KEY (USER_ID)       REFERENCES [CORE].[USERS]           (USER_ID),
    CONSTRAINT FK_TRADES_INSTRUMENT FOREIGN KEY (INSTRUMENT_ID) REFERENCES [CORE].[INSTRUMENTS]     (INSTRUMENT_ID),
    CONSTRAINT FK_TRADES_DIRECTION  FOREIGN KEY (DIRECTION_ID)  REFERENCES [CORE].[ORDER_DIRECTION] (DIRECTION_ID),
    CONSTRAINT FK_TRADES_OFFSET     FOREIGN KEY (OFFSET_ID)     REFERENCES [CORE].[ORDER_OFFSET]    (OFFSET_ID)
);

CREATE TABLE [CORE].[ORDER_TRADE] (
    [ORDER_ID]          CHAR(16),
    [TRADE_ID]          CHAR(16),
    CONSTRAINT FK_ORDER_TRADE_ORDER FOREIGN KEY (ORDER_ID) REFERENCES [CORE].[ORDERS] (ORDER_ID),
    CONSTRAINT FK_ORDER_TRADE_TRADE FOREIGN KEY (TRADE_ID) REFERENCES [CORE].[TRADES] (TRADE_ID)
);

CREATE TABLE [CORE].[TRADE_CONTRACT] (
    [CONTRACT_ID]       CHAR(16),
    [TRADE_ID]          CHAR(16),
    CONSTRAINT FK_TRADE_CONTRACT_CONTRACT   FOREIGN KEY (CONTRACT_ID)   REFERENCES [CORE].CONTRACTS (CONTRACT_ID),
    CONSTRAINT FK_TRADE_CONTRACT_TRADE      FOREIGN KEY (TRADE_ID)      REFERENCES [CORE].[TRADES]  (TRADE_ID)
);

CREATE TABLE [CORE].[LOCKED_CONTRACTS] (
    [CONTRACT_ID]       CHAR(16),
    [ORDER_ID]          CHAR(16),
    [LOCKED_TIME]       DATETIMEOFFSET      NOT NULL,
    [UNLOCKED_TIME]     DATETIMEOFFSET
    CONSTRAINT FK_LOCKED_CONTRACTS_CONTRACT FOREIGN KEY (CONTRACT_ID)   REFERENCES [CORE].CONTRACTS (CONTRACT_ID),
    CONSTRAINT FK_LOCKED_CONTRACTS_ORDER    FOREIGN KEY (ORDER_ID)      REFERENCES [CORE].[ORDERS]  (ORDER_ID)
);

CREATE TABLE [CORE].[LOCKED_MARGINS] (
    [CONTRACT_PRE_ID]   CHAR(16),
    [ORDER_ID]          CHAR(16),
    [LOCKED_MARGIN]     MONEY           NOT NULL,
    [LOCKED_FEE]        MONEY           NOT NULL,
    [AMOUNT]            MONEY           NOT NULL,
    [VOLUME]            SMALLINT        NOT NULL,
    [LOCKED_TIME]       DATETIMEOFFSET  NOT NULL,
    [UNLOCKED_TIME]     DATETIMEOFFSET
    CONSTRAINT PK_LOCKED_MARGINS        PRIMARY KEY (CONTRACT_PRE_ID),
    CONSTRAINT FK_LOCKED_MARGINS_ORDER  FOREIGN KEY (ORDER_ID)          REFERENCES [CORE].[ORDERS]  (ORDER_ID)
);

CREATE TABLE [CORE].[TRADING_DAY] (
    [TODAY]             DATE        NOT NULL,
    [TRADING_DAY]       DATE        NOT NULL
);

CREATE TABLE [CORE].[SETTLED_PRICES] (
    [INSTRUMENT_ID]     CHAR(16),
    [SETTLED_PRICE]     MONEY               NOT NULL,
    [PRE_SETTLED_PRICE] MONEY               NOT NULL,
    [TRADING_DAY]       DATE                NOT NULL,
    [PRE_TRADING_DAY]   DATE                NOT NULL,
    [UPDATE_TIME]       DATETIMEOFFSET      NOT NULL,
    CONSTRAINT AK_INSTRUMENT UNIQUE (INSTRUMENT_ID),
    CONSTRAINT FK_SETTLED_PRICES_INSTRUMENT FOREIGN KEY (INSTRUMENT_ID) REFERENCES [CORE].[INSTRUMENTS]     (INSTRUMENT_ID),
);

CREATE TABLE [CORE].[BOOLEAN] (
    [BOOLEAN_ID]        TINYINT,
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_BOOLEAN PRIMARY KEY (BOOLEAN_ID)
);

CREATE TABLE [CORE].[INSTRUMENT_SESSION_TIMES] (
    [INSTRUMENT_ID]     CHAR(16),
    [PRODUCT_ID]        CHAR(16),
    [SESSION_RANK]      TINYINT                 NOT NULL,
    [BEGIN_TIME]        DATETIMEOFFSET          NOT NULL,
    [END_TIME]          DATETIMEOFFSET          NOT NULL,
    CONSTRAINT FK_TIME_INSTRUMENT   FOREIGN KEY (INSTRUMENT_ID) REFERENCES [CORE].[INSTRUMENTS] (INSTRUMENT_ID),
    CONSTRAINT FK_TIME_PRODUCT      FOREIGN KEY (PRODUCT_ID)    REFERENCES [CORE].[PRODUCTS]    (PRODUCT_ID)
);

CREATE TABLE [CORE].[MARKET_SESSION_TIMES] (
    [SESSION_RANK]      TINYINT UNIQUE          NOT NULL,
    [BEGIN_TIME]        DATETIMEOFFSET          NOT NULL,
    [END_TIME]          DATETIMEOFFSET          NOT NULL,
);

CREATE TABLE [CORE].[HOLIDAYS] (
    [DATE]              DATETIMEOFFSET          NOT NULL,
    [NIGHT_ONLY]        TINYINT                 NOT NULL,
    CONSTRAINT FK_HOLIDAY_INC_NIGHT FOREIGN KEY (NIGHT_ONLY) REFERENCES [CORE].[BOOLEAN] (BOOLEAN_ID)
);
GO

CREATE SCHEMA [MANA];
GO

CREATE TABLE [MANA].[FRONT_STATUSES] (
    [FRONT_STATUS_ID]   TINYINT,
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_FRONT_STATUSES PRIMARY KEY (FRONT_STATUS_ID)
);

CREATE TABLE [MANA].[FRONTS] (
    [FRONT_ID]          SMALLINT,
    [START_TIME]        DATETIMEOFFSET      NOT NULL,
    [STOP_TIME]         DATETIMEOFFSET      NOT NULL,
    [LAST_ACTIVE_TIME]  DATETIMEOFFSET      NOT NULL,
    [FRONT_STATUS_ID]   TINYINT             NOT NULL,
    CONSTRAINT PK_FRONTS            PRIMARY KEY (FRONT_ID),
    CONSTRAINT FK_FRONTS_STATUS     FOREIGN KEY (FRONT_STATUS_ID) REFERENCES [MANA].[FRONT_STATUSES] (FRONT_STATUS_ID)
);

CREATE TABLE [MANA].[REJECT_INPUT_REASONS] (
    [REJECT_ID]         TINYINT,
    [NOTE]              NCHAR(128),
    CONSTRAINT PK_REJECT_REASONS PRIMARY KEY (REJECT_ID)
);

CREATE TABLE [MANA].[INPUT_ORDERS](
    [ORDER_REF]         CHAR(16),
    [FRONT_ID]          SMALLINT,
    [SESSION_ID]        TINYINT,
    [ORDER_ID]          CHAR(16),
    [ACCOUNT_ID]        CHAR(16),
    [USER_ID]           CHAR(16),
    [INSTRUMENT_ID]     CHAR(16),
    [EXCHANGE_ID]       CHAR(16),
    [LIMIT_PRICE]       MONEY,
    [VOLUME]            SMALLINT,
    [DIRECTION_ID]      TINYINT,
    [OFFSET_ID]         TINYINT,
    [STRATEGY_ID]       TINYINT,
    [REJECT_ID]         TINYINT,
    [INSERT_TIME]       DATETIMEOFFSET  NOT NULL,
    CONSTRAINT PK_INPUT_ORDERS          PRIMARY KEY (ORDER_REF, FRONT_ID, SESSION_ID),
    CONSTRAINT FK_INPUT_FRONT           FOREIGN KEY (FRONT_ID)  REFERENCES [MANA].[FRONTS] (FRONT_ID),
    CONSTRAINT FK_INPUT_REJECT          FOREIGN KEY (REJECT_ID) REFERENCES [MANA].[REJECT_INPUT_REASONS] (REJECT_ID)
);
GO

CREATE FUNCTION [CORE].[GET_HOLIDAYS] ()
RETURNS TABLE
AS
RETURN
(
    SELECT TOP 100 PERCENT [DATE]
    FROM [CORE].[HOLIDAYS] 
    ORDER BY [DATE] ASC
);
GO

CREATE FUNCTION [CORE].[GET_MARKET_SESSION_TIMES] ()
RETURNS TABLE
AS RETURN
(
    SELECT TOP 100 PERCENT *
    FROM [CORE].[MARKET_SESSION_TIMES]
    ORDER BY [BEGIN_TIME] ASC
);
GO

CREATE FUNCTION [CORE].[GET_INSTRUMENT_SESSION_TIMES] (@INSTRUMENT_ID CHAR(16) = NULL)
RETURNS @RET_TABLE TABLE
(
    [INSTRUMENT_ID]     CHAR(16),
    [PRODUCT_ID]        CHAR(16),
    [SESSION_RANK]      TINYINT,
    [BEGIN_TIME]        DATETIMEOFFSET,
    [END_TIME]          DATETIMEOFFSET
)
AS
BEGIN
    IF @INSTRUMENT_ID IS NULL
    BEGIN
        INSERT INTO @RET_TABLE
        SELECT TOP 100 PERCENT
            [INSTRUMENT_ID],
            [PRODUCT_ID],
            [SESSION_RANK],
            [BEGIN_TIME],
            [END_TIME]
        FROM [CORE].[INSTRUMENT_SESSION_TIMES]
        ORDER BY [INSTRUMENT_ID], [BEGIN_TIME] ASC
    END 
    ELSE
    BEGIN
        INSERT INTO @RET_TABLE
        SELECT TOP 100 PERCENT
            [INSTRUMENT_ID],
            [PRODUCT_ID],
            [SESSION_RANK],
            [BEGIN_TIME],
            [END_TIME]
        FROM [CORE].[INSTRUMENT_SESSION_TIMES]
        WHERE [INSTRUMENT_ID] = @INSTRUMENT_ID
        ORDER BY [INSTRUMENT_ID], [BEGIN_TIME] ASC
    END
    RETURN
END
GO
